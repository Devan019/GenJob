@model GenJobMVC.ViewModel.JobAnalysisViewModel
@Html.Partial("_Sidebar")

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<style>
    .chart-container {
        position: relative;
        height: 300px;
        width: 100%;
    }
    .fade-in {
        animation: fadeIn 0.8s ease-in;
    }
    @@keyframes fadeIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
    }
    .glow-card {
        box-shadow: 0 4px 20px -2px rgba(0, 0, 0, 0.3);
        transition: all 0.3s ease;
    }
    .glow-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 30px -2px rgba(99, 102, 241, 0.3);
    }
</style>

<div class="min-h-screen bg-gradient-to-br from-gray-900 to-gray-800 text-white">
    <div class="container mx-auto px-4 py-8">
        <!-- Header -->
        <div class="text-center mb-12 fade-in">
            <h1 class="text-4xl font-bold bg-gradient-to-r from-blue-400 to-purple-500 bg-clip-text text-transparent mb-4">
                Tech Job Market Analysis
            </h1>
            <p class="text-gray-300 text-lg">Insights on role distribution, salaries, and company locations</p>
        </div>

        <!-- Summary Cards -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-12">
            <div class="bg-gray-800 rounded-2xl glow-card p-6 fade-in border border-gray-700">
                <div class="flex items-center mb-4">
                    <div class="w-12 h-12 bg-blue-500/20 rounded-lg flex items-center justify-center mr-4">
                        üí∞
                    </div>
                    <div>
                        <h3 class="text-lg font-semibold text-blue-300">Highest Paying Role</h3>
                        <p class="text-2xl font-bold text-white">@Model.HighestPayingRole</p>
                        <p class="text-blue-200">@Model.HighestPayingRoleSalary</p>
                    </div>
                </div>
            </div>

            <div class="bg-gray-800 rounded-2xl glow-card p-6 fade-in border border-gray-700">
                <div class="flex items-center mb-4">
                    <div class="w-12 h-12 bg-green-500/20 rounded-lg flex items-center justify-center mr-4">
                        üìä
                    </div>
                    <div>
                        <h3 class="text-lg font-semibold text-green-300">Most Job Openings</h3>
                        <p class="text-2xl font-bold text-white">@Model.MostJobOpeningsLocation</p>
                        <p class="text-green-200">@Model.MostJobOpeningsCount.ToString("N0") companies</p>
                    </div>
                </div>
            </div>

            <div class="bg-gray-800 rounded-2xl glow-card p-6 fade-in border border-gray-700">
                <div class="flex items-center mb-4">
                    <div class="w-12 h-12 bg-purple-500/20 rounded-lg flex items-center justify-center mr-4">
                        ‚≠ê
                    </div>
                    <div>
                        <h3 class="text-lg font-semibold text-purple-300">Highest Rated Location</h3>
                        <p class="text-2xl font-bold text-white">@Model.HighestRatedLocation</p>
                        <p class="text-purple-200">@Model.HighestRating.ToString("F2")/5 rating</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Charts Grid -->
        <div class="space-y-8">
            <!-- First Row -->
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                <!-- Role Distribution -->
                <div class="bg-gray-800 rounded-2xl glow-card p-6 fade-in border border-gray-700">
                    <div class="flex items-center justify-between mb-6">
                        <h2 class="text-xl font-semibold text-white">Role Distribution</h2>
                        <span class="text-blue-400 text-sm">üìà Market Share</span>
                    </div>
                    <div class="chart-container">
                        <canvas id="rolesChart"></canvas>
                    </div>
                </div>

                <!-- Salary Comparison -->
                <div class="bg-gray-800 rounded-2xl glow-card p-6 fade-in border border-gray-700">
                    <div class="flex items-center justify-between mb-6">
                        <h2 class="text-xl font-semibold text-white">Average Salary by Role</h2>
                        <span class="text-green-400 text-sm">üí∞ Earnings</span>
                    </div>
                    <div class="chart-container">
                        <canvas id="salaryChart"></canvas>
                    </div>
                </div>
            </div>

            <!-- Second Row -->
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                <!-- Companies by Location -->
                <div class="bg-gray-800 rounded-2xl glow-card p-6 fade-in border border-gray-700">
                    <div class="flex items-center justify-between mb-6">
                        <h2 class="text-xl font-semibold text-white">Companies by Location</h2>
                        <span class="text-purple-400 text-sm">üè¢ Distribution</span>
                    </div>
                    <div class="chart-container">
                        <canvas id="locationChart"></canvas>
                    </div>
                </div>

                <!-- Salary by Location -->
                <div class="bg-gray-800 rounded-2xl glow-card p-6 fade-in border border-gray-700">
                    <div class="flex items-center justify-between mb-6">
                        <h2 class="text-xl font-semibold text-white">Salary by Location</h2>
                        <span class="text-orange-400 text-sm">üíµ Regional Pay</span>
                    </div>
                    <div class="chart-container">
                        <canvas id="locationSalaryChart"></canvas>
                    </div>
                </div>
            </div>

            <!-- Third Row -->
            <div class="bg-gray-800 rounded-2xl glow-card p-6 fade-in border border-gray-700">
                <div class="flex items-center justify-between mb-6">
                    <h2 class="text-xl font-semibold text-white">Company Ratings by Location</h2>
                    <span class="text-yellow-400 text-sm">‚≠ê Reviews</span>
                </div>
                <div class="chart-container">
                    <canvas id="ratingChart"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // Data from the ViewModel
    const data = {
        roles_cnt: @Html.Raw(Json.Serialize(Model.RolesCount)),
        avg_salary: @Html.Raw(Json.Serialize(Model.AverageSalary)),
        company_cnt: @Html.Raw(Json.Serialize(Model.CompanyCount)),
        location_salary: @Html.Raw(Json.Serialize(Model.LocationSalary)),
        rating: @Html.Raw(Json.Serialize(Model.Rating))
    };


    // Helper function to format numbers with commas
    function formatNumber(num) {
        return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    }

    // Helper function to format currency
    function formatCurrency(num) {
        return '‚Çπ' + formatNumber(num);
    }

    // Dark mode colors
    const colors = {
        blue: ['#3b82f6', '#60a5fa', '#93c5fd', '#1e40af'],
        green: ['#10b981', '#34d399', '#6ee7b7', '#047857'],
        purple: ['#8b5cf6', '#a78bfa', '#c4b5fd', '#7c3aed'],
        orange: ['#f59e0b', '#fbbf24', '#fcd34d', '#d97706'],
        red: ['#ef4444', '#f87171', '#fca5a5', '#dc2626'],
        indigo: ['#6366f1', '#818cf8', '#a5b4fc', '#4f46e5']
    };

    // Chart.js global configuration for dark mode
    Chart.defaults.color = '#9ca3af';
    Chart.defaults.borderColor = '#374151';
    Chart.defaults.backgroundColor = '#1f2937';

    // Role Distribution Chart (Horizontal Bar)
    const rolesCtx = document.getElementById('rolesChart').getContext('2d');
    const rolesLabels = Object.keys(data.roles_cnt);
    const rolesData = Object.values(data.roles_cnt);

    new Chart(rolesCtx, {
        type: 'bar',
        data: {
            labels: rolesLabels,
            datasets: [{
                label: 'Number of Roles',
                data: rolesData,
                backgroundColor: colors.blue[0],
                borderColor: colors.blue[3],
                borderWidth: 2,
                borderRadius: 6,
                borderSkipped: false,
            }]
        },
        options: {
            indexAxis: 'y',
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                },
                tooltip: {
                    backgroundColor: 'rgba(17, 24, 39, 0.9)',
                    titleColor: '#f3f4f6',
                    bodyColor: '#f3f4f6',
                    borderColor: colors.blue[0],
                    borderWidth: 1,
                    callbacks: {
                        label: function(context) {
                            return `Roles: ${formatNumber(context.raw)}`;
                        }
                    }
                }
            },
            scales: {
                x: {
                    beginAtZero: true,
                    grid: {
                        color: 'rgba(55, 65, 81, 0.5)'
                    },
                    ticks: {
                        callback: function(value) {
                            return formatNumber(value);
                        }
                    }
                },
                y: {
                    grid: {
                        color: 'rgba(55, 65, 81, 0.5)'
                    }
                }
            }
        }
    });

    // Salary Comparison Chart (Bar)
    const salaryCtx = document.getElementById('salaryChart').getContext('2d');
    const salaryLabels = Object.keys(data.avg_salary);
    const salaryData = Object.values(data.avg_salary);

    // Sort salaries in descending order for better visualization
    const salarySorted = salaryLabels.map((label, index) => ({
        label,
        value: salaryData[index]
    })).sort((a, b) => b.value - a.value);

    new Chart(salaryCtx, {
        type: 'bar',
        data: {
            labels: salarySorted.map(item => item.label),
            datasets: [{
                label: 'Average Salary (‚Çπ)',
                data: salarySorted.map(item => item.value),
                backgroundColor: salarySorted.map((item, index) => {
                    if (item.value > 800000) return colors.green[0];
                    if (item.value > 600000) return colors.blue[0];
                    return colors.orange[0];
                }),
                borderColor: salarySorted.map((item, index) => {
                    if (item.value > 800000) return colors.green[3];
                    if (item.value > 600000) return colors.blue[3];
                    return colors.orange[3];
                }),
                borderWidth: 2,
                borderRadius: 6,
                borderSkipped: false,
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                tooltip: {
                    backgroundColor: 'rgba(17, 24, 39, 0.9)',
                    titleColor: '#f3f4f6',
                    bodyColor: '#f3f4f6',
                    borderColor: colors.green[0],
                    borderWidth: 1,
                    callbacks: {
                        label: function(context) {
                            return `Salary: ${formatCurrency(context.raw)}`;
                        }
                    }
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    grid: {
                        color: 'rgba(55, 65, 81, 0.5)'
                    },
                    ticks: {
                        callback: function(value) {
                            return formatCurrency(value);
                        }
                    }
                },
                x: {
                    grid: {
                        color: 'rgba(55, 65, 81, 0.5)'
                    }
                }
            }
        }
    });

    // Location Distribution Chart (Pie)
    const locationCtx = document.getElementById('locationChart').getContext('2d');
    const locationLabels = Object.keys(data.company_cnt);
    const locationData = Object.values(data.company_cnt);

    new Chart(locationCtx, {
        type: 'doughnut',
        data: {
            labels: locationLabels,
            datasets: [{
                data: locationData,
                backgroundColor: [
                    colors.blue[0], colors.green[0], colors.purple[0],
                    colors.orange[0], colors.red[0], colors.indigo[0],
                    colors.blue[1], colors.green[1], colors.purple[1], colors.orange[1]
                ],
                borderColor: '#111827',
                borderWidth: 3,
                hoverOffset: 15
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            cutout: '50%',
            plugins: {
                legend: {
                    position: 'right',
                    labels: {
                        color: '#9ca3af',
                        font: {
                            size: 11
                        }
                    }
                },
                tooltip: {
                    backgroundColor: 'rgba(17, 24, 39, 0.9)',
                    titleColor: '#f3f4f6',
                    bodyColor: '#f3f4f6',
                    borderColor: colors.purple[0],
                    borderWidth: 1,
                    callbacks: {
                        label: function(context) {
                            const label = context.label || '';
                            const value = context.raw || 0;
                            const total = locationData.reduce((a, b) => a + b, 0);
                            const percentage = Math.round((value / total) * 100);
                            return `${label}: ${formatNumber(value)} (${percentage}%)`;
                        }
                    }
                }
            }
        }
    });

    // Location Salary Chart (Bar)
    const locationSalaryCtx = document.getElementById('locationSalaryChart').getContext('2d');
    const locationSalaryLabels = Object.keys(data.location_salary);
    const locationSalaryData = Object.values(data.location_salary);

    // Sort by salary for better visualization
    const locationSalarySorted = locationSalaryLabels.map((label, index) => ({
        label,
        value: locationSalaryData[index]
    })).sort((a, b) => b.value - a.value);

    new Chart(locationSalaryCtx, {
        type: 'bar',
        data: {
            labels: locationSalarySorted.map(item => item.label),
            datasets: [{
                label: 'Average Salary (‚Çπ)',
                data: locationSalarySorted.map(item => item.value),
                backgroundColor: locationSalarySorted.map((item, index) => {
                    if (item.value > 800000) return colors.green[0];
                    if (item.value > 700000) return colors.blue[0];
                    if (item.value > 600000) return colors.orange[0];
                    return colors.red[0];
                }),
                borderColor: locationSalarySorted.map((item, index) => {
                    if (item.value > 800000) return colors.green[3];
                    if (item.value > 700000) return colors.blue[3];
                    if (item.value > 600000) return colors.orange[3];
                    return colors.red[3];
                }),
                borderWidth: 2,
                borderRadius: 6,
                borderSkipped: false,
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                },
                tooltip: {
                    backgroundColor: 'rgba(17, 24, 39, 0.9)',
                    titleColor: '#f3f4f6',
                    bodyColor: '#f3f4f6',
                    borderColor: colors.orange[0],
                    borderWidth: 1,
                    callbacks: {
                        label: function(context) {
                            return `Salary: ${formatCurrency(context.raw)}`;
                        }
                    }
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    grid: {
                        color: 'rgba(55, 65, 81, 0.5)'
                    },
                    ticks: {
                        callback: function(value) {
                            return formatCurrency(value);
                        }
                    }
                },
                x: {
                    grid: {
                        color: 'rgba(55, 65, 81, 0.5)'
                    }
                }
            }
        }
    });

    // Rating Chart (Bar)
    const ratingCtx = document.getElementById('ratingChart').getContext('2d');
    const ratingLabels = Object.keys(data.rating);
    const ratingData = Object.values(data.rating);

    new Chart(ratingCtx, {
        type: 'bar',
        data: {
            labels: ratingLabels,
            datasets: [{
                label: 'Average Rating',
                data: ratingData,
                backgroundColor: ratingData.map(value => {
                    if (value >= 4.0) return colors.green[0];
                    if (value >= 3.9) return colors.blue[0];
                    return colors.orange[0];
                }),
                borderColor: ratingData.map(value => {
                    if (value >= 4.0) return colors.green[3];
                    if (value >= 3.9) return colors.blue[3];
                    return colors.orange[3];
                }),
                borderWidth: 2,
                borderRadius: 6,
                borderSkipped: false,
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                tooltip: {
                    backgroundColor: 'rgba(17, 24, 39, 0.9)',
                    titleColor: '#f3f4f6',
                    bodyColor: '#f3f4f6',
                    borderColor: colors.orange[2],
                    borderWidth: 1,
                    callbacks: {
                        label: function(context) {
                            return `Rating: ${context.raw.toFixed(2)}/5`;
                        }
                    }
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    max: 5,
                    grid: {
                        color: 'rgba(55, 65, 81, 0.5)'
                    },
                    ticks: {
                        callback: function(value) {
                            return value.toFixed(1);
                        }
                    }
                },
                x: {
                    grid: {
                        color: 'rgba(55, 65, 81, 0.5)'
                    }
                }
            }
        }
    });
</script>